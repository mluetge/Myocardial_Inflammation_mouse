
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ######## process Cellranger output ########################################
> #### Aim: Standard workflow to automate processing of cellranger output ###
> #### For each sample sce and seurat objects plus marker genes are gene- ###
> #### rated and stored at NAS server to be available. SCE objects can be ###
> #### merged for final processing using cbind(sce1, sce2) ##################
> ###########################################################################
> 
> ## load packages
> library(processSCE)
> library(runSeurat3)
> 
> ##commandargs
> args <- commandArgs(TRUE)
> n <- length(args)
> #res_file <- paste0(args[n-1], "/", args[n])
> seuratOut <-  paste0(args[n-1], "/", gsub(".rds","",args[n]), "_seurat.rds")
> #markerOut <-  paste0(args[n-1], "/", gsub(".rds","",args[n]), "_markerGenes.txt")
> #specificOut <-  paste0(args[n-1], "/", gsub(".rds","",args[n]), "_specificGenes.txt")
> #filteredOut <- paste0(args[n-1], "/", gsub(".rds","",args[n]), "_GenesFiltered.rds")
> QCout <- paste0(args[n-1], "/filteringReport.txt")
> org <- args[n-2]
> 
> ## input dir to fastq files from Cellranger and dataset name
> fastqdirs <- c()
> datasetNam <- c()
> for(i in seq_len(n-3)){
+   path <- args[i]
+   fastqdirs[i] <- paste0(args[n-1], "/", path)
+   datasetNam[i] <- gsub("^.*/","",gsub("/outs.*$","",args[i]))
+ }
> 
> ## create sce object and run QC
> sce <- createSCEobject(sampleDir=fastqdirs, dataset=datasetNam)
Warning message:
Column `Sample`/`sampleDir` joining character vector and factor, coercing into character vector 
> sce <- runQC(sce = sce, organism=org)
Warning messages:
1: 'calculateQCMetrics' is deprecated.
Use 'perCellQCMetrics' or 'perFeatureQCMetrics' instead. 
2: 'normalizeSCE' is deprecated.
Use 'logNormCounts' instead.
See help("Deprecated") 
3: In .local(object, ...) : using library sizes as size factors
4: 'centreSizeFactors' is deprecated.
See help("Deprecated") 
> sce <- findOutlier(sce = sce, QCfile=QCout)
> sce <- sce[, !(sce$total_counts_drop | sce$total_features_drop |
+                  sce$mito_drop)]
> ## save sce
> #saveRDS(sce, file=res_file)
> sce <- filterGenes(sce)
[1] "gene count after filtering: 22566"
> #saveRDS(sce, file=filteredOut)
> detach(package:processSCE)
> 
> ## create seurat object and save marker files
> seurat <- createSeurat3(sce=sce, res = c(0.25, 0.6, 0.8, 0.4))
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session
11:46:12 UMAP embedding parameters a = 0.9922 b = 1.112
11:46:12 Read 8852 rows and found 20 numeric columns
11:46:12 Using Annoy for neighbor search, n_neighbors = 30
11:46:12 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:46:14 Writing NN index file to temp file /tmp/RtmprSgeR9/file3ed62e6ba088
11:46:14 Searching Annoy index using 1 thread, search_k = 3000
11:46:17 Annoy recall = 100%
11:46:17 Commencing smooth kNN distance calibration using 1 thread
11:46:19 Initializing from normalized Laplacian + noise
11:46:19 Commencing optimization for 500 epochs, with 371742 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
11:46:48 Optimization finished
Computing nearest neighbor graph
Computing SNN
Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck

Number of nodes: 8852
Number of edges: 283284

Running Louvain algorithm...
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Maximum modularity in 10 random starts: 0.8456
Number of communities: 6
Elapsed time: 1 seconds
Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck

Number of nodes: 8852
Number of edges: 283284

Running Louvain algorithm...
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Maximum modularity in 10 random starts: 0.7740
Number of communities: 9
Elapsed time: 1 seconds
Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck

Number of nodes: 8852
Number of edges: 283284

Running Louvain algorithm...
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Maximum modularity in 10 random starts: 0.7491
Number of communities: 12
Elapsed time: 1 seconds
Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck

Number of nodes: 8852
Number of edges: 283284

Running Louvain algorithm...
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Maximum modularity in 10 random starts: 0.8123
Number of communities: 6
Elapsed time: 1 seconds
> remove(sce)
> #createMarkerLists(seurat, markerOut=markerOut, specificOut = specificOut)
> saveRDS(seurat, file=seuratOut)
> 
> ## session info
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Debian GNU/Linux 9 (stretch)

Matrix products: default
BLAS:   /mnt/tools/R-3.6.1/lib/libRblas.so
LAPACK: /home/debian/.local/share/r-miniconda/envs/r-reticulate/lib/libmkl_rt.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] runSeurat3_0.1.0

loaded via a namespace (and not attached):
  [1] tsne_0.1-3                  nlme_3.1-148               
  [3] bitops_1.0-6                matrixStats_0.56.0         
  [5] RcppAnnoy_0.0.16            RColorBrewer_1.1-2         
  [7] httr_1.4.1                  GenomeInfoDb_1.22.1        
  [9] sctransform_0.2.1           tools_3.6.1                
 [11] R6_2.4.1                    irlba_2.3.3                
 [13] KernSmooth_2.23-17          HDF5Array_1.14.4           
 [15] vipor_0.4.5                 uwot_0.1.8                 
 [17] lazyeval_0.2.2              BiocGenerics_0.32.0        
 [19] colorspace_1.4-1            tidyselect_1.1.0           
 [21] gridExtra_2.3               compiler_3.6.1             
 [23] Biobase_2.46.0              BiocNeighbors_1.4.2        
 [25] plotly_4.9.2.1              DelayedArray_0.12.3        
 [27] Seurat_3.1.5                scales_1.1.1               
 [29] lmtest_0.9-37               pbapply_1.4-2              
 [31] ggridges_0.5.2              rappdirs_0.3.1             
 [33] stringr_1.4.0               digest_0.6.25              
 [35] R.utils_2.9.2               XVector_0.26.0             
 [37] htmltools_0.4.0             scater_1.14.6              
 [39] pkgconfig_2.0.3             limma_3.42.2               
 [41] htmlwidgets_1.5.1           rlang_0.4.6                
 [43] DelayedMatrixStats_1.8.0    zoo_1.8-8                  
 [45] jsonlite_1.6.1              ica_1.0-2                  
 [47] BiocParallel_1.20.1         dplyr_0.8.5                
 [49] R.oo_1.23.0                 RCurl_1.98-1.2             
 [51] magrittr_1.5                BiocSingular_1.2.2         
 [53] GenomeInfoDbData_1.2.2      patchwork_1.0.0            
 [55] Matrix_1.2-18               Rcpp_1.0.4.6               
 [57] ggbeeswarm_0.6.0            munsell_0.5.0              
 [59] S4Vectors_0.24.4            Rhdf5lib_1.8.0             
 [61] reticulate_1.15             ape_5.3                    
 [63] viridis_0.5.1               lifecycle_0.2.0            
 [65] R.methodsS3_1.8.0           stringi_1.4.6              
 [67] edgeR_3.28.1                MASS_7.3-51.6              
 [69] SummarizedExperiment_1.16.1 zlibbioc_1.32.0            
 [71] processSCE_0.1.0            rhdf5_2.30.1               
 [73] Rtsne_0.15                  plyr_1.8.6                 
 [75] grid_3.6.1                  parallel_3.6.1             
 [77] listenv_0.8.0               ggrepel_0.8.2              
 [79] dqrng_0.2.1                 crayon_1.3.4               
 [81] lattice_0.20-41             cowplot_1.0.0              
 [83] splines_3.6.1               locfit_1.5-9.4             
 [85] pillar_1.4.4                igraph_1.2.5               
 [87] GenomicRanges_1.38.0        future.apply_1.5.0         
 [89] reshape2_1.4.4              codetools_0.2-16           
 [91] stats4_3.6.1                leiden_0.3.3               
 [93] glue_1.4.1                  data.table_1.12.8          
 [95] png_0.1-7                   vctrs_0.3.0                
 [97] tidyr_1.1.0                 gtable_0.3.0               
 [99] RANN_2.6.1                  purrr_0.3.4                
[101] future_1.17.0               assertthat_0.2.1           
[103] ggplot2_3.3.0               rsvd_1.0.3                 
[105] DropletUtils_1.6.1          RSpectra_0.16-0            
[107] survival_3.1-12             viridisLite_0.3.0          
[109] pheatmap_1.0.12             SingleCellExperiment_1.8.0 
[111] tibble_3.0.1                beeswarm_0.2.3             
[113] IRanges_2.20.2              cluster_2.1.0              
[115] globals_0.12.5              fitdistrplus_1.1-1         
[117] ellipsis_0.3.1              ROCR_1.0-11                
> date()
[1] "Mon May 25 11:48:28 2020"
> 
> proc.time()
   user  system elapsed 
286.404  41.288 329.440 
